TRFDIR="/storage/yjin/TreeofLife/trf"
ANNDIR = "/storage/yjin/TreeofLife/UCSCannotation"
YJDIR="/storage/yjin/TreeofLife/AnnResult"
GENOMESDIR="/storage/yjin/TreeofLife/data"

wildcard_constraints:
    species="[^.]*"

config["annotation"] = "SINE"

#PECIES = ["ce11","ailMel1","anoCar2","anoGam3","balAcu1","calMil1","cavPor3","cerSim1","chlSab2","choHof1", "criGriChoV2","danRer11","dasNov3","dipOrd1","dm6","echTel2","equCab3","felCat9","gadMor1","galGal6","hg19","latCha1","loxAfr3","macFas5","melUnd1","micMur2","musFur1","myoLuc2","nanPar1","nomLeu3","ochPri3","oreNil2","ornAna2","oryCun2","oryLat2","otoGar3","oviAri4","panPan3","panTro6","papAnu4","papHam1","ponAbe3","proCap1","pteVam1","rheMac10","sacCer3","saiBol1","sorAra2","sarHar1","speTri2","strPur2","susScr11","taeGut2","tarSyr2","tetNig2","thaSir1","triMan1","tupBel1","vicPac2",'bosTau9','calJac4','canFam5','fr3','gorGor6','melGal5','rn7','xenTro10','mm39'] 
#SPECIES =["wuhCor1","ailMel1","bosTau7","ce11","chlSab2","choHof1","danRer11","equCab3","hg19","melGal1","mm10","myoLuc2","nomLeu3","ornAna2","oviAri4","panPan3","panTro6","papAnu4","ponAbe2","proCap1","pteVam1","rheMac10","rn6","sacCer3","susScr11","taeGut2","tetNig2","xenTro9"]
#SPECIES =["ailMel1","aquChr2","bosTau7","calMil1","canFam3","canFam3","cavPor3","ce11","chlSab2","choHof1","chrPic1","criGriChoV2","danRer11","dasNov3","dipOrd1","dm6","echTel2","equCab3","felCat9","fr2","gadMor1","galGal6","gorGor5","hetGla2","hetGla2","hg19","latCha1","loxAfr3","macEug2","macFas5","melGal1","melUnd1","micMur2","mm10","musFur1","myoLuc2","nomLeu3","ochPri3","oreNil2","ornAna2","oryCun2","oryLat2","otoGar3","oviAri4","panPan3","panTro6","papAnu4","petMar3","ponAbe2","proCap1","pteVam1","rheMac10","rn6","sacCer3","saiBol1","sarHar1","sorAra2","speTri2","susScr11","taeGut2","tarSyr2","tetNig2","tupBel1","vicPac2","xenTro9"] 
#SPECIES = ["mm39","rn7","criGriChoV2"]
SPECIES = ["otoGar3","micMur2","tarSyr2","saiBol1",'calJac4',"nomLeu3","ponAbe2","hg38","gorGor6","panTro6","panPan3","nasLar1","chlSab2","papHam1","papAnu4","rheMac10","macFas5"]
# TODO this could eventually read from a file once this list gets very long

#ANNOTATION = ["intron","coding"]

rule all:
    input:
        [("%s/ann.{annotation}.-V.TRSpecies_PeriodPercs.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.-V.TRSpecies_GenomePerc.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.-V.TRSpecies_Density.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_homopolymer.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_dinucleotide.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_trinucleotide.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_tetranucleotide.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_pentanucleotide.pdf"%YJDIR).format(annotation=config["annotation"])],
        #[("%s/ann.{annotation}.TRSpecies_hexanucleotide.pdf"%YJDIR).format(annotation=config["annotation"])]
        [("%s/ann.{annotation}.organize-v.csv"%YJDIR).format(annotation=config["annotation"])]
        #[("%s/ann.{annotation}.organize_{species}.csv"%YJDIR).format(species=species, annotation=config["annotation"]) for species in SPECIES]
        #[("%s/{species}.TranslationStart.bed"%ANNDIR).format(species=species, annotation=config["annotation"]) for species in SPECIES]



#filter STR in the annotated regions
#rule extract_CDS:
#    input:
#        "%s/{species}.gtf"%ANNDIR
#    output:
#         "%s/{annotation}/{species}.{annotation}.gtf"%ANNDIR
#    shell:
#        "awk 'index($3, \"exon\")' {input} > {output}" 

#convert gtf to bed format
#rule gtf_to_bed:
#    input:
#        "%s/{annotation}/{species}.{annotation}.gtf"%ANNDIR
#    output:
#         "%s/{annotation}/{species}.{annotation}.bed"%ANNDIR
#    shell:
#        "gtf2bed <{input}> {output}" 

#filter annotated regions
#rule extract:
#    input:
#        "%s/{species}.gtf"%ANNDIR
#    output:
#         "%s/{species}_{annotation}.bed"%ANNDIR
#    shell:
#        "intersectBed -a {input[1]} -b {input[0]} -wa -u > {output}"

#filter STR in the annotated regions
rule intersect:
    input:
        "%s/{species}.{annotation}.bed"%ANNDIR, "%s/{species}/{species}.trf.filt.bed"%TRFDIR
    output:
         "%s/{annotation}/{species}/{species}.filt.{annotation}.bed"%ANNDIR
    shell:
        "intersectBed -a {input[1]} -b {input[0]} -wa -v > {output}"

#filter STR in the annotated regions
#rule filter:
#    input:
#        "%s/{annotation}/{species}/{species}.ann.{annotation}.bed"%ANNDIR
#    output:
#        "%s/{annotation}/{species}/{species}.filt.{annotation}.bed"%ANNDIR
#    shell:
#        "python3 filter_TRF_nopandas.py {input} {output}"

#count for homopolymer, dinucleotide, etc.,
rule str_count:
    input:
        "%s/{annotation}/{species}/{species}.filt.{annotation}.bed"%ANNDIR
    output:
         "%s/{species}/{species}.ann.{annotation}.str_count.txt"%YJDIR
    shell:
        "for period in $(seq 1 6); do awk -v\"period=$period\" '$4==period'  {input} | wc -l | awk -v\"period=$period\" '{{print period \"\t\" $0}}' ; done > {output}"

#count the length of entire genome
rule genome_length:
    input:
        "%s/{species}/{species}.ann.{annotation}.str_count.txt"%YJDIR, "%s/{species}/{species}.fa.fai"%GENOMESDIR
    output:
        "%s/{species}/{species}.ann.{annotation}.genome_length.txt"%YJDIR
    shell:
         "awk '{{print $2}}' {input[1]} | awk '{{ sum+=$1 }}END{{ print sum }}' > {output}"

#count the number of str base
rule str_base:
    input:
        "%s/{species}/{species}.ann.{annotation}.genome_length.txt"%YJDIR, "%s/{annotation}/{species}/{species}.filt.{annotation}.bed"%ANNDIR
    output:
        "%s/{species}/{species}.ann.{annotation}.str_base.txt"%YJDIR
    shell:
         "awk '{{print length($6)}}'  {input[1]} | awk '{{sum+=$1 }}END{{ print sum }}'> {output}"

#Creating table to organize annalysis
rule organize:
    input:
        "%s/{species}/{species}.ann.{annotation}.str_base.txt"%YJDIR, "%s/{species}/{species}.ann.{annotation}.str_count.txt"%YJDIR, "%s/{species}/{species}.ann.{annotation}.genome_length.txt"%YJDIR 
    output:
        "%s/ann.{annotation}.organize_{species}.csv"%YJDIR
    shell:
         "python \"STREvolution_Stat.py\" {input[1]} {input[2]} {input[0]} {wildcards.species} {output}"

rule combine_organize:
    input:
         [("%s/ann.{annotation}.organize_{species}.csv"%YJDIR).format(species=species, annotation=config["annotation"]) for species in SPECIES]
    output:
        "%s/ann.{annotation}.organize-v.csv"%YJDIR
    shell:
        "cat {input} > {output}"



rule plot:
    input:
       "%s/ann.{annotation}.organize-v.csv"%YJDIR
    #if multiple figures are saved in this step, what should be the output?
    output:
        "%s/ann.{annotation}.-V.TRSpecies_PeriodPercs.pdf"%YJDIR, "%s/ann.{annotation}.TRSpecies_GenomePerc.pdf"%YJDIR, "%s/ann.{annotation}.TRSpecies_Density.pdf"%YJDIR, "%s/ann.{annotation}.TRSpecies_homopolymer.pdf"%YJDIR,  "%s/ann.{annotation}.TRSpecies_dinucleotide.pdf"%YJDIR,  "%s/ann.{annotation}.TRSpecies_trinucleotide.pdf"%YJDIR,  "%s/ann.{annotation}.TRSpecies_tetranucleotide.pdf"%YJDIR,  "%s/ann.{annotation}.TRSpecies_pentanucleotide.pdf"%YJDIR,  "%s/ann.{annotation}.TRSpecies_hexanucleotide.pdf"%YJDIR
    shell:
        "python \"Tree_Of_Life_Graph.py\" {input[0]} {output}"